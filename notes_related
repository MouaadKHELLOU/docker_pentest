Le registre utilisé est un registre privé, là ou l'image docker de l'application web "demi" est déposée.
Ce registre permet au deux machines "33 et 34" la même image ainsi toutes modifications faites dans l'une seront apportées dans l'autre avec les commandes "push" et "pull".

--> Première interaction avec le registre :
- reconnaissance avec l'outil NMAP pour déceler les ports utilisés ainsi que la version de l'API utilisée.
nmap -sV VM_ip@

En suite, vérifier les ROUTES possibles selon la version de l'API trouvée dans le registre.
pour voir les routes possibles, il faut lire le document ci-dessous :
https://docs.docker.com/registry/spec/api/

- Discovering Repositories :
En utilisant : curl à partir du ligne de commande ou GET avec POSTMAN ou tout simplement le navigateur.
l'URL demandé avec GET est comme suit (par exemple : http://registry_name_on_daemon:port/v2/_catalog)
le resultat du GET sur ledit URL, doit nous lister all the repositories registered on the registry
Une fois the repositories has benn listed, we are only going to focus on one of then. The most interesting one and based on :
1. The repository name ;
2. Any repository tag(s) published.

On va envoyer de nouveau une requete avec la methode GET sur l'URL : http://registry_name_on_daemon:port/v2/repository/name/tags/list
sans oublier de remplacer repository et name avec ceux choisies dans l'étape précédante.
exemple : curl http://docker-rodeo.thm:5000/v2/cmnatic/myapp1/tags/list
Comme resultat de cette commande, on va lister les différents "tag" pour l'image choisie. Ici on va choisir tag qu'il parait vulnérable pour qu'on l'exploit dans l'étape suivante.

- Grabbing the Data :
Toujours avec la methode GET, on va requester l'URL suivant : /v2/<name>/manifests/<reference> pour voir le contenu du dossier "manifest" qui contient bcp d'information sur l'image choisie avec le tag précisé.
exemple : curl http://docker-rodeo.thm:5000/v2/repo/myapp_name/manifests/tag
Maintenant une fois executée, on va s'interesser sur le resultat rendu, et plus précisement sur "history"
Il faut le lire et l'analyser doucement et révéler toute information utile, notamment credentials, mot de passe administrateur base de données ou peut importe.

--> 2ème interaction with registry : Vulnerability : Reverse Engineering Docker Images
De prime abord, il faut télécharger et installer : dive tool
lien officiel : https://github.com/wagoodman/dive#installation

en suite, on cherche l'identifiant de l'image : IMAGE_ID
cet identifiant sera utilisé pour reverser l'image avec l'outil "dive".
la commande est : dive image_id

- Using Dive :
une fois la commande "dive image_id" est éxécutée, on va s'intersser au :
1. Layers
2. Current Layer Contents
3. 
